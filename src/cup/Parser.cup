/*************/
/* Based on a template by Oren Ish-Shalom */
/*************/


/*************/
/* IMPORTS */
/*************/

import java_cup.runtime.*;
import ast.*;
import java.util.List;
import java.util.LinkedList;

parser code
{:
	public Lexer lexer;

	public Parser(Lexer lexer)
	{
		super(lexer);
		this.lexer = lexer;
	}

	// Override default error reporting in parser
	public void report_error(String message, Object info)
	{
	    System.err.print("Syntax error at line " + lexer.getLine() + " of input. Parser\n");
		System.exit(1);
	}
:}

/************************/
/* CUSTOMIZE CUP PARSER */
/************************/
scan with
{:
	Symbol s;
    try {
	s = lexer.next_token();
	// System.out.print(s.sym);
	// System.out.print("[");
	// System.out.print(lexer.getLine());
	// System.out.print(":");
	// System.out.print(lexer.getCharPos());
	// System.out.print("] ");
	// System.out.print(sym.terminalNames[s.sym]);
	// if (s.value != null)
	// {
	//	System.out.print("( ");
	//	System.out.print(s.value);
	//	System.out.print(" )");
	// }
	// System.out.print("\n");
	return s;
     } catch (java.lang.Error e) {
         System.err.print("Syntax error at line " + lexer.getLine() + " of input. Lexer\n");
         System.exit(1);
         return null;
     }
:};

/*************/
/* TERMINALS */
/*************/
terminal PUBLIC, CLASS, MAIN;
terminal EXTENDS ,STATIC, VOID;
terminal PLUS, MINUS, MULT, DIV, LT;
terminal LPAREN, RPAREN, L_CUR_PAREN, R_CUR_PAREN;
terminal int NUMBER;
terminal String ID;
terminal FALSE, TRUE;
terminal COMMA, END_SENT, ASSIGN, DOT;
terminal NOT,AND;
terminal INT, ARRAY, BOOLEAN;
terminal NEW;
terminal L_ARRAY, R_ARRAY;
terminal IF, ELSE, WHILE;
terminal LENGTH;
terminal RETURN,THIS;
terminal PRINT, STRING;

/*****************/
/* NON TERMINALS */
/*****************/
non terminal Prog prog;
non terminal MainClass mainClass;
non terminal ClassDecl classDecl;
non terminal VarDecl varDecl;
non terminal MethodDecl methodDecl;
non terminal FormalArg formalArg;
non terminal LinkedList<ClassDecl> classDeclsList;
non terminal LinkedList<VarDecl> varDeclsList;
non terminal LinkedList<MethodDecl> methodDeclsList;
non terminal LinkedList<FormalArg> formalsList;

non terminal AstType type;
non terminal Statement statement;

non terminal Expr expr;
non terminal LinkedList<Expr> commaExprList;
/***********************/
/* OPERATOR PRECEDENCE */
/***********************/
precedence left CLASS;
precedence left PLUS, MINUS;
precedence left MULT, DIV;


/************************/
/* INITIAL NON TERMINAL */
/************************/
start with prog;

/********************/
/* PRODUCTION RULES */
/********************/
type		::=		INT L_ARRAY R_ARRAY {: RESULT = new IntArrayAstType(); :}
            |	BOOLEAN     {: RESULT = new BoolAstType(); :}
            |	INT         {: RESULT = new IntAstType(); :}
            |	ID:id       {: RESULT = new RefType(id); :}  ;

prog        ::=  mainClass:main classDeclsList:classList   {:RESULT = new Program(main,classList); :};


mainClass   ::=CLASS ID:main L_CUR_PAREN PUBLIC STATIC VOID MAIN LPAREN
		STRING L_ARRAY R_ARRAY ID:args RPAREN L_CUR_PAREN statement:mainStatement R_CUR_PAREN R_CUR_PAREN
		{:RESULT = new MainClass(main,args,mainStatement); :} ;


classDecl  ::= CLASS ID:className EXTENDS ID:superName R_CUR_PAREN varDeclsList:varDecls methodDeclsList:methodDecls
            L_CUR_PAREN     {: RESULT = new ClassDecl(className, superName, varDecls, methodDecls); :}
            | CLASS ID:className L_CUR_PAREN varDeclsList:varDecls methodDeclsList:methodDecls R_CUR_PAREN
            {: RESULT = new ClassDecl(className, null, varDecls, methodDecls); :}  ;

classDeclsList  ::= classDecl:classDecl1 classDeclsList:classList {: classList.addFirst(classDecl1);
                                                                    RESULT = classList; :}
               		 | /* empty */           	{: RESULT = new LinkedList<Expr>(); :}  ;

methodDecl  ::= PUBLIC type:returnType ID:name LPAREN formalsList:formals RPAREN L_CUR_PAREN varDeclsList:vardecls statementList:body RETURN expr:retExpr END_SENT R_CUR_PAREN  {: RESULT = new MethodDecl(returnType, name, formals, vardecls, body, retExpr, 0); :} ;


formalArg ::= type:formalType ID:formalName     {: RESULT = new FormalArg(formalType, formalName, 0); :} ;

formalsList  ::= formalArg:formalArg1 formalsList:formals {: formals.addFirst(formalArg1);
                                                                    RESULT = formals; :}
               		 | /* empty */           	{: RESULT = new LinkedList<Expr>(); :} ;


statement	::= IF LPAREN expr:e1 RPAREN statement:if ELSE statement:else   {: RESULT = new IfStatement(e1, if, else); :}
                | ID:id1 ASSIGN expr:e1 END_SENT    {: RESULT = new AssignStatement(id, e1); :}
                | WHILE LPAREN expr:cond RPAREN L_CUR_PAREN statement:blockStatement
					R_CUR_PAREN {: RESULT = new WhileStatement(cond,blockStatement); :}
				| L_CUR_PAREN statementList:statements R_CUR_PAREN {: RESULT = new BlockStatement(statements); :}
				| PRINT LPAREN expr:e1 RPAREN END_SENT  {: RESULT = new SysoutStatement(e1); :}
				;



statementList ::= statement:statement1 statementList:statements {: statements.addFirst(statement1); RESULT = statements; :}
                  | /* empty */                             	{: RESULT = new LinkedList<Statement>(); :} ;


expr ::= expr:e1 PLUS expr:e2 		{: RESULT = new AddExpr(e1, e2); :}
         | expr:e1 MINUS expr:e2	{: RESULT = new SubtractExpr(e1, e2); :}
         | expr:e1 MULT expr:e2		{: RESULT = new MultExpr(e1, e2); :}
         | expr:e1 DIV expr:e2      {: RESULT = new DivExpr(e1, e2); :}
         | expr:e1 LT expr:e2 		{: RESULT = new LtExpr(e1,e2); :}
         | expr:e1 AND expr:e2 		{: RESULT = new AndExpr(e1,e2); :}
         | NOT expr:e1        		{: RESULT = new NotExpr(e1); :}
         | LPAREN expr:e RPAREN		{: RESULT = e; :}
         | NUMBER:n				    {: RESULT = new IntegerLiteralExpr(n); :}
         | FALSE:false              {: RESULT = new FalseExpr(); :}
         | TRUE:true                {: RESULT = new TrueExpr(); :}
         | expr:ownerExpr DOT ID:methodId LPAREN commaExprList:actuals RPAREN   {: RESULT = new MethodCallExpr(ownerExpr, methodId, actuals); :}
         | NEW INT L_ARRAY expr:lengthExpr R_ARRAY {: RESULT = new NewIntArrayExpr(lengthExpr); :}
         | NEW ID:e LPAREN RPAREN 		{:RESULT = new NewObjectExpr(e);:}
         | ID:arr L_ARRAY expr:e R_ARRAY {: RESULT = new ArrayAccessExpr(arr,e);:}
         | ID:lv L_ARRAY expr:index R_ARRAY ASSIGN expr:rv
			{:RESULT = new AssignArrayStatement(lv,index,rv);:}
		 | expr:e DOT LENGTH {: RESULT = new ArrayLengthExpr(e);:}
		 | THIS {: RESULT = new ThisExpr(e);:}
;
varDecl ::= type:varType ID:varName  {: RESULT = new VarDecl(varType,varName,10) ;:};

commaExprList ::= COMMA expr: e commaExprList:el {: el.addFirst(e); RESULT = el; :}
		 | /* empty */           	{: RESULT = new LinkedList<Expr>(); :}  ;