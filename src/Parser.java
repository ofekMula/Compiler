
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import ast.*;
import java.util.List;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\066\000\002\002\004\000\002\017\005\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\002\004" +
    "\000\002\003\023\000\002\004\012\000\002\004\010\000" +
    "\002\010\004\000\002\010\002\000\002\006\015\000\002" +
    "\012\004\000\002\012\002\000\002\007\004\000\002\013" +
    "\005\000\002\013\003\000\002\014\004\000\002\014\005" +
    "\000\002\020\011\000\002\020\006\000\002\020\007\000" +
    "\002\020\005\000\002\020\007\000\002\020\011\000\002" +
    "\021\004\000\002\021\002\000\002\024\005\000\002\024" +
    "\005\000\002\024\005\000\002\024\005\000\002\024\005" +
    "\000\002\024\004\000\002\024\005\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\006\000\002" +
    "\024\007\000\002\024\006\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\023\005" +
    "\000\002\022\006\000\002\015\004\000\002\015\005\000" +
    "\002\005\005\000\002\011\004\000\002\011\002\000\002" +
    "\025\003\000\002\025\005\000\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\221\000\004\005\005\001\002\000\006\002\ufff7\005" +
    "\146\001\002\000\004\023\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\042\007\uffcc\012" +
    "\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc" +
    "\023\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\033\uffcc\037" +
    "\uffcc\040\uffcc\001\002\000\004\020\012\001\002\000\004" +
    "\004\013\001\002\000\004\010\014\001\002\000\004\011" +
    "\015\001\002\000\004\006\016\001\002\000\004\016\017" +
    "\001\002\000\004\050\020\001\002\000\004\037\021\001" +
    "\002\000\004\040\022\001\002\000\004\023\010\001\002" +
    "\000\004\017\024\001\002\000\004\020\025\001\002\000" +
    "\014\020\026\023\010\041\032\043\031\047\027\001\002" +
    "\000\016\020\026\021\uffe7\023\010\041\032\043\031\047" +
    "\027\001\002\000\004\016\135\001\002\000\004\021\133" +
    "\001\002\000\004\016\127\001\002\000\004\016\121\001" +
    "\002\000\006\030\034\037\035\001\002\000\022\016\047" +
    "\022\036\023\010\024\042\025\040\032\045\036\037\046" +
    "\043\001\002\000\022\016\047\022\036\023\010\024\042" +
    "\025\040\032\045\036\037\046\043\001\002\000\030\012" +
    "\uffdf\013\uffdf\014\uffdf\015\uffdf\017\uffdf\026\uffdf\027\uffdf" +
    "\031\uffdf\033\uffdf\037\uffdf\040\uffdf\001\002\000\006\023" +
    "\010\034\111\001\002\000\030\012\uffdd\013\uffdd\014\uffdd" +
    "\015\uffdd\017\uffdd\026\uffdd\027\uffdd\031\uffdd\033\uffdd\037" +
    "\uffdd\040\uffdd\001\002\000\030\012\uffd6\013\uffd6\014\uffd6" +
    "\015\uffd6\017\uffd6\026\uffd6\027\uffd6\031\uffd6\033\uffd6\037" +
    "\uffd6\040\uffd6\001\002\000\030\012\uffde\013\uffde\014\uffde" +
    "\015\uffde\017\uffde\026\uffde\027\uffde\031\uffde\033\uffde\037" +
    "\uffde\040\uffde\001\002\000\030\012\uffd7\013\uffd7\014\uffd7" +
    "\015\uffd7\017\uffd7\026\uffd7\027\uffd7\031\uffd7\033\uffd7\037" +
    "\uffd7\040\uffd7\001\002\000\030\012\uffd8\013\uffd8\014\uffd8" +
    "\015\uffd8\017\uffd8\026\uffd8\027\uffd8\031\uffd8\033\uffd8\037" +
    "\uffd8\040\uffd8\001\002\000\022\016\047\022\036\023\010" +
    "\024\042\025\040\032\045\036\037\046\043\001\002\000" +
    "\022\012\056\013\057\014\053\015\052\031\061\033\055" +
    "\037\060\040\103\001\002\000\022\016\047\022\036\023" +
    "\010\024\042\025\040\032\045\036\037\046\043\001\002" +
    "\000\030\012\uffd9\013\uffd9\014\uffd9\015\uffd9\017\uffd9\026" +
    "\uffd9\027\uffd9\031\uffd9\033\uffd9\037\uffd9\040\uffd9\001\002" +
    "\000\022\012\056\013\057\014\053\015\052\017\054\031" +
    "\061\033\055\037\060\001\002\000\022\016\047\022\036" +
    "\023\010\024\042\025\040\032\045\036\037\046\043\001" +
    "\002\000\022\016\047\022\036\023\010\024\042\025\040" +
    "\032\045\036\037\046\043\001\002\000\030\012\uffe0\013" +
    "\uffe0\014\uffe0\015\uffe0\017\uffe0\026\uffe0\027\uffe0\031\uffe0" +
    "\033\uffe0\037\uffe0\040\uffe0\001\002\000\022\016\047\022" +
    "\036\023\010\024\042\025\040\032\045\036\037\046\043" +
    "\001\002\000\022\016\047\022\036\023\010\024\042\025" +
    "\040\032\045\036\037\046\043\001\002\000\022\016\047" +
    "\022\036\023\010\024\042\025\040\032\045\036\037\046" +
    "\043\001\002\000\022\016\047\022\036\023\010\024\042" +
    "\025\040\032\045\036\037\046\043\001\002\000\006\023" +
    "\010\044\062\001\002\000\030\012\uffd5\013\uffd5\014\uffd5" +
    "\015\uffd5\017\uffd5\026\uffd5\027\uffd5\031\uffd5\033\uffd5\037" +
    "\uffd5\040\uffd5\001\002\000\004\016\065\001\002\000\030" +
    "\012\uffdc\013\uffdc\014\uffdc\015\uffdc\017\uffdc\026\uffdc\027" +
    "\uffdc\031\uffdc\033\uffdc\037\uffdc\040\uffdc\001\002\000\024" +
    "\016\047\017\067\022\036\023\010\024\042\025\040\032" +
    "\045\036\037\046\043\001\002\000\004\017\073\001\002" +
    "\000\030\012\uffd3\013\uffd3\014\uffd3\015\uffd3\017\uffd3\026" +
    "\uffd3\027\uffd3\031\uffd3\033\uffd3\037\uffd3\040\uffd3\001\002" +
    "\000\024\012\056\013\057\014\053\015\052\017\uffce\026" +
    "\071\031\061\033\055\037\060\001\002\000\022\016\047" +
    "\022\036\023\010\024\042\025\040\032\045\036\037\046" +
    "\043\001\002\000\004\017\uffcd\001\002\000\030\012\uffd2" +
    "\013\uffd2\014\uffd2\015\uffd2\017\uffd2\026\uffd2\027\uffd2\031" +
    "\uffd2\033\uffd2\037\uffd2\040\uffd2\001\002\000\022\012\056" +
    "\013\057\014\053\015\052\031\061\033\055\037\060\040" +
    "\075\001\002\000\030\012\uffd4\013\uffd4\014\uffd4\015\uffd4" +
    "\017\uffd4\026\uffd4\027\uffd4\031\uffd4\033\uffd4\037\uffd4\040" +
    "\uffd4\001\002\000\030\012\uffe5\013\uffe5\014\053\015\uffe5" +
    "\017\uffe5\026\uffe5\027\uffe5\031\061\033\uffe5\037\060\040" +
    "\uffe5\001\002\000\030\012\uffe6\013\uffe6\014\053\015\uffe6" +
    "\017\uffe6\026\uffe6\027\uffe6\031\061\033\uffe6\037\060\040" +
    "\uffe6\001\002\000\030\012\056\013\057\014\053\015\052" +
    "\017\uffe2\026\uffe2\027\uffe2\031\061\033\uffe2\037\060\040" +
    "\uffe2\001\002\000\030\012\uffe4\013\uffe4\014\uffe4\015\uffe4" +
    "\017\uffe4\026\uffe4\027\uffe4\031\061\033\uffe4\037\060\040" +
    "\uffe4\001\002\000\030\012\056\013\057\014\053\015\uffe3" +
    "\017\uffe3\026\uffe3\027\uffe3\031\061\033\uffe3\037\060\040" +
    "\uffe3\001\002\000\004\030\104\001\002\000\022\016\047" +
    "\022\036\023\010\024\042\025\040\032\045\036\037\046" +
    "\043\001\002\000\022\012\056\013\057\014\053\015\052" +
    "\027\106\031\061\033\055\037\060\001\002\000\022\020" +
    "\uffe9\021\uffe9\023\uffe9\041\uffe9\042\uffe9\043\uffe9\045\uffe9" +
    "\047\uffe9\001\002\000\030\012\uffe1\013\uffe1\014\uffe1\015" +
    "\uffe1\017\uffe1\026\uffe1\027\uffe1\031\061\033\uffe1\037\060" +
    "\040\uffe1\001\002\000\004\016\115\001\002\000\004\037" +
    "\112\001\002\000\022\016\047\022\036\023\010\024\042" +
    "\025\040\032\045\036\037\046\043\001\002\000\022\012" +
    "\056\013\057\014\053\015\052\031\061\033\055\037\060" +
    "\040\114\001\002\000\030\012\uffdb\013\uffdb\014\uffdb\015" +
    "\uffdb\017\uffdb\026\uffdb\027\uffdb\031\uffdb\033\uffdb\037\uffdb" +
    "\040\uffdb\001\002\000\004\017\116\001\002\000\030\012" +
    "\uffda\013\uffda\014\uffda\015\uffda\017\uffda\026\uffda\027\uffda" +
    "\031\uffda\033\uffda\037\uffda\040\uffda\001\002\000\022\012" +
    "\056\013\057\014\053\015\052\027\120\031\061\033\055" +
    "\037\060\001\002\000\022\020\uffed\021\uffed\023\uffed\041" +
    "\uffed\042\uffed\043\uffed\045\uffed\047\uffed\001\002\000\022" +
    "\016\047\022\036\023\010\024\042\025\040\032\045\036" +
    "\037\046\043\001\002\000\022\012\056\013\057\014\053" +
    "\015\052\017\123\031\061\033\055\037\060\001\002\000" +
    "\014\020\026\023\010\041\032\043\031\047\027\001\002" +
    "\000\004\042\125\001\002\000\014\020\026\023\010\041" +
    "\032\043\031\047\027\001\002\000\022\020\uffee\021\uffee" +
    "\023\uffee\041\uffee\042\uffee\043\uffee\045\uffee\047\uffee\001" +
    "\002\000\022\016\047\022\036\023\010\024\042\025\040" +
    "\032\045\036\037\046\043\001\002\000\022\012\056\013" +
    "\057\014\053\015\052\017\131\031\061\033\055\037\060" +
    "\001\002\000\014\020\026\023\010\041\032\043\031\047" +
    "\027\001\002\000\022\020\uffec\021\uffec\023\uffec\041\uffec" +
    "\042\uffec\043\uffec\045\uffec\047\uffec\001\002\000\004\021" +
    "\134\001\002\000\006\002\ufffb\005\ufffb\001\002\000\022" +
    "\016\047\022\036\023\010\024\042\025\040\032\045\036" +
    "\037\046\043\001\002\000\022\012\056\013\057\014\053" +
    "\015\052\017\137\031\061\033\055\037\060\001\002\000" +
    "\004\027\140\001\002\000\022\020\uffea\021\uffea\023\uffea" +
    "\041\uffea\042\uffea\043\uffea\045\uffea\047\uffea\001\002\000" +
    "\020\020\026\021\uffe7\023\010\041\032\043\031\045\uffe7" +
    "\047\027\001\002\000\004\021\143\001\002\000\022\020" +
    "\uffeb\021\uffeb\023\uffeb\041\uffeb\042\uffeb\043\uffeb\045\uffeb" +
    "\047\uffeb\001\002\000\006\021\uffe8\045\uffe8\001\002\000" +
    "\006\002\ufff7\005\146\001\002\000\004\023\010\001\002" +
    "\000\004\002\ufffc\001\002\000\006\007\152\020\151\001" +
    "\002\000\014\004\uffcf\021\uffcf\023\uffcf\034\uffcf\035\uffcf" +
    "\001\002\000\004\023\010\001\002\000\004\020\154\001" +
    "\002\000\014\004\uffcf\021\uffcf\023\uffcf\034\uffcf\035\uffcf" +
    "\001\002\000\014\004\160\021\ufff4\023\010\034\157\035" +
    "\161\001\002\000\026\004\uffd0\020\uffd0\021\uffd0\023\uffd0" +
    "\034\uffd0\035\uffd0\041\uffd0\043\uffd0\045\uffd0\047\uffd0\001" +
    "\002\000\006\023\ufffe\037\216\001\002\000\010\023\010" +
    "\034\157\035\161\001\002\000\004\023\uffff\001\002\000" +
    "\004\021\171\001\002\000\004\023\ufffd\001\002\000\006" +
    "\004\160\021\ufff4\001\002\000\004\023\010\001\002\000" +
    "\004\027\167\001\002\000\026\004\uffd1\020\uffd1\021\uffd1" +
    "\023\uffd1\034\uffd1\035\uffd1\041\uffd1\043\uffd1\045\uffd1\047" +
    "\uffd1\001\002\000\004\021\ufff5\001\002\000\006\002\ufffa" +
    "\005\ufffa\001\002\000\004\023\010\001\002\000\004\016" +
    "\174\001\002\000\012\017\206\023\010\034\157\035\161" +
    "\001\002\000\004\020\176\001\002\000\022\020\uffcf\023" +
    "\uffcf\034\uffcf\035\uffcf\041\uffcf\043\uffcf\045\uffcf\047\uffcf" +
    "\001\002\000\022\020\026\023\010\034\157\035\161\041" +
    "\032\043\031\045\uffe7\047\027\001\002\000\004\045\202" +
    "\001\002\000\010\023\ufffd\030\034\037\035\001\002\000" +
    "\022\016\047\022\036\023\010\024\042\025\040\032\045" +
    "\036\037\046\043\001\002\000\022\012\056\013\057\014" +
    "\053\015\052\027\204\031\061\033\055\037\060\001\002" +
    "\000\004\021\205\001\002\000\006\004\ufff6\021\ufff6\001" +
    "\002\000\004\020\ufff0\001\002\000\006\017\ufff1\026\214" +
    "\001\002\000\004\023\010\001\002\000\004\017\212\001" +
    "\002\000\004\020\uffef\001\002\000\006\017\ufff3\026\ufff3" +
    "\001\002\000\010\023\010\034\157\035\161\001\002\000" +
    "\004\017\ufff2\001\002\000\004\040\217\001\002\000\004" +
    "\023\000\001\002\000\014\004\160\021\ufff4\023\010\034" +
    "\157\035\161\001\002\000\004\021\222\001\002\000\006" +
    "\002\ufff9\005\ufff9\001\002\000\004\002\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\221\000\006\002\005\003\003\001\001\000\006\004" +
    "\144\010\146\001\001\000\004\016\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\032\020" +
    "\027\001\001\000\010\016\032\020\140\021\141\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\016\040\022\047" +
    "\023\043\024\116\001\001\000\012\016\040\022\047\023" +
    "\043\024\045\001\001\000\002\001\001\000\004\016\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\016\040" +
    "\022\047\023\043\024\106\001\001\000\002\001\001\000" +
    "\012\016\040\022\047\023\043\024\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\016\040\022\047\023" +
    "\043\024\101\001\001\000\012\016\040\022\047\023\043" +
    "\024\100\001\001\000\002\001\001\000\012\016\040\022" +
    "\047\023\043\024\077\001\001\000\012\016\040\022\047" +
    "\023\043\024\076\001\001\000\012\016\040\022\047\023" +
    "\043\024\075\001\001\000\012\016\040\022\047\023\043" +
    "\024\073\001\001\000\004\016\062\001\001\000\002\001" +
    "\001\000\004\015\063\001\001\000\002\001\001\000\014" +
    "\016\040\022\047\023\043\024\067\025\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\016\040\022\047\023\043\024\067\025\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\016\040\022\047\023\043\024\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\016\040\022\047\023" +
    "\043\024\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\016\040\022\047\023\043\024\121" +
    "\001\001\000\002\001\001\000\006\016\032\020\123\001" +
    "\001\000\002\001\001\000\006\016\032\020\125\001\001" +
    "\000\002\001\001\000\012\016\040\022\047\023\043\024" +
    "\127\001\001\000\002\001\001\000\006\016\032\020\131" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\016\040\022\047\023\043\024\135\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\016\032\020\140\021\143\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\144\010" +
    "\222\001\001\000\004\016\147\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\217\001\001\000\004\016" +
    "\152\001\001\000\002\001\001\000\004\011\154\001\001" +
    "\000\014\005\155\006\163\012\161\016\162\017\164\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\016\162" +
    "\017\171\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\163\012\167\001\001\000\004" +
    "\016\165\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\172\001\001" +
    "\000\004\014\174\001\001\000\012\007\206\013\210\016" +
    "\162\017\207\001\001\000\002\001\001\000\004\011\176" +
    "\001\001\000\014\005\155\016\200\017\164\020\140\021" +
    "\177\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\016\040\022\047\023\043\024\202\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\212\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\206" +
    "\013\214\016\162\017\207\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\005\155\006\163" +
    "\012\220\016\162\017\164\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s;
    try {
	s = lexer.next_token();
//	System.out.print(s.sym);
//	System.out.print("[");
//	System.out.print(lexer.getLine());
//	System.out.print(":");
//	System.out.print(lexer.getCharPos());
//	System.out.print("] ");
//	System.out.print(sym.terminalNames[s.sym]);
//	if (s.value != null)
//	 {
//		System.out.print("( ");
//		System.out.print(s.value);
//		System.out.print(" )");
//	 }
//	System.out.print("\n");
	return s;
     } catch (java.lang.Error e) {
         System.err.print("Syntax error at line " + lexer.getLine() + " of input.\n");
         System.exit(1);
         return null;
     }

    }


	public Lexer lexer;

	public Parser(Lexer lexer)
	{
		super(lexer);
		this.lexer = lexer;
	}

	// Override default error reporting in parser
	public void report_error(String message, Object info)
	{
//	    System.out.print("ERROR >> ");
//        System.out.print("[");
//        System.out.print(lexer.getLine());
//        System.out.print(":");
//        System.out.print(lexer.getCharPos());
//        System.out.print("] ");
	    System.err.print("Syntax error at line " + lexer.getLine() + " of input.\n");
		System.exit(1);
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // type ::= INT L_ARRAY R_ARRAY 
            {
              AstType RESULT =null;
		 RESULT = new IntArrayAstType(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // type ::= BOOLEAN 
            {
              AstType RESULT =null;
		 RESULT = new BoolAstType(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // type ::= INT 
            {
              AstType RESULT =null;
		 RESULT = new IntAstType(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // type ::= Identifier 
            {
              AstType RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RefType(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // prog ::= mainClass classDeclsList 
            {
              Program RESULT =null;
		int mainleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		MainClass main = (MainClass)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int classListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int classListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<ClassDecl> classList = (LinkedList<ClassDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Program(main,classList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // mainClass ::= CLASS Identifier L_CUR_PAREN PUBLIC STATIC VOID MAIN LPAREN STRING L_ARRAY R_ARRAY Identifier RPAREN L_CUR_PAREN statement R_CUR_PAREN R_CUR_PAREN 
            {
              MainClass RESULT =null;
		int mainleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).right;
		String main = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-15)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String args = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int mainStatementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mainStatementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Statement mainStatement = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new MainClass(main,args,mainStatement); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mainClass",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // classDecl ::= CLASS Identifier EXTENDS Identifier L_CUR_PAREN varDeclsList methodDeclsList R_CUR_PAREN 
            {
              ClassDecl RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int superNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int superNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String superName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int varDeclsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varDeclsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<VarDecl> varDecls = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int methodDeclsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int methodDeclsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<MethodDecl> methodDecls = (LinkedList<MethodDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ClassDecl(className, superName, varDecls, methodDecls); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classDecl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // classDecl ::= CLASS Identifier L_CUR_PAREN varDeclsList methodDeclsList R_CUR_PAREN 
            {
              ClassDecl RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int varDeclsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varDeclsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<VarDecl> varDecls = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int methodDeclsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int methodDeclsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<MethodDecl> methodDecls = (LinkedList<MethodDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ClassDecl(className, null, varDecls, methodDecls); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classDecl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // classDeclsList ::= classDecl classDeclsList 
            {
              LinkedList<ClassDecl> RESULT =null;
		int classDecl1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int classDecl1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ClassDecl classDecl1 = (ClassDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int classListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int classListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<ClassDecl> classList = (LinkedList<ClassDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 classList.addFirst(classDecl1);
                                                                    RESULT = classList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classDeclsList",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // classDeclsList ::= 
            {
              LinkedList<ClassDecl> RESULT =null;
		 RESULT = new LinkedList<ClassDecl>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classDeclsList",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // methodDecl ::= PUBLIC type Identifier methodFormalList L_CUR_PAREN varDeclsList statementList RETURN expr END_SENT R_CUR_PAREN 
            {
              MethodDecl RESULT =null;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		AstType returnType = (AstType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int formalsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int formalsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		LinkedList<FormalArg> formals = (LinkedList<FormalArg>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int vardeclsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int vardeclsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		LinkedList<VarDecl> vardecls = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<Statement> body = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int retExprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int retExprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr retExpr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new MethodDecl(returnType, name, formals, vardecls, body, retExpr, 0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodDecl",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // methodDeclsList ::= methodDecl methodDeclsList 
            {
              LinkedList<MethodDecl> RESULT =null;
		int methodDecl1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int methodDecl1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		MethodDecl methodDecl1 = (MethodDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int methodListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int methodListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<MethodDecl> methodList = (LinkedList<MethodDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 methodList.addFirst(methodDecl1);
                                                                                        RESULT = methodList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodDeclsList",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // methodDeclsList ::= 
            {
              LinkedList<MethodDecl> RESULT =null;
		 RESULT = new LinkedList<MethodDecl>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodDeclsList",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // formalArg ::= type Identifier 
            {
              FormalArg RESULT =null;
		int formalTypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int formalTyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AstType formalType = (AstType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int formalNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int formalNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String formalName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FormalArg(formalType, formalName, 0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formalArg",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // formalsList ::= formalArg COMMA formalsList 
            {
              LinkedList<FormalArg> RESULT =null;
		int formalArg1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int formalArg1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		FormalArg formalArg1 = (FormalArg)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int formalsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int formalsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<FormalArg> formals = (LinkedList<FormalArg>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 formals.addFirst(formalArg1);
                                                                    RESULT = formals; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formalsList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // formalsList ::= formalArg 
            {
              LinkedList<FormalArg> RESULT =null;
		int formalArg1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int formalArg1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FormalArg formalArg1 = (FormalArg)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<FormalArg>(); RESULT.add(formalArg1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formalsList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // methodFormalList ::= LPAREN RPAREN 
            {
              LinkedList<FormalArg> RESULT =null;
		 RESULT = new LinkedList<FormalArg>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodFormalList",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // methodFormalList ::= LPAREN formalsList RPAREN 
            {
              LinkedList<FormalArg> RESULT =null;
		int formalsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int formalsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<FormalArg> formals = (LinkedList<FormalArg>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = formals; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodFormalList",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= IF LPAREN expr RPAREN statement ELSE statement 
            {
              Statement RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ifStatementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ifStatementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Statement ifStatement = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elseStatementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elseStatementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement elseStatement = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IfStatement(e1, ifStatement, elseStatement); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= Identifier ASSIGN expr END_SENT 
            {
              Statement RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AssignStatement(id1, e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= WHILE LPAREN expr RPAREN statement 
            {
              Statement RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr cond = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int blockStatementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int blockStatementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement blockStatement = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new WhileStatement(cond,blockStatement); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= L_CUR_PAREN statementList R_CUR_PAREN 
            {
              Statement RESULT =null;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Statement> statements = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new BlockStatement(statements); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= PRINT LPAREN expr RPAREN END_SENT 
            {
              Statement RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new SysoutStatement(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= Identifier L_ARRAY expr R_ARRAY ASSIGN expr END_SENT 
            {
              Statement RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String lv = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expr index = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr rv = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new AssignArrayStatement(lv,index,rv); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statementList ::= statement statementList 
            {
              LinkedList<Statement> RESULT =null;
		int statement1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statement1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement statement1 = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Statement> statements = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 statements.addFirst(statement1); RESULT = statements; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statementList",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statementList ::= 
            {
              LinkedList<Statement> RESULT =null;
		 RESULT = new LinkedList<Statement>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statementList",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= expr PLUS expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AddExpr(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= expr MINUS expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SubtractExpr(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= expr MULT expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MultExpr(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= expr LT expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LtExpr(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= expr AND expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AndExpr(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= NOT expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NotExpr(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= LPAREN expr RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= INTEGER 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int n = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntegerLiteralExpr(n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= FALSE 
            {
              Expr RESULT =null;
		 RESULT = new FalseExpr(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= TRUE 
            {
              Expr RESULT =null;
		 RESULT = new TrueExpr(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= expr DOT Identifier methodCallList 
            {
              Expr RESULT =null;
		int ownerExprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ownerExprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr ownerExpr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int methodIdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int methodIdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String methodId = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int actualsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int actualsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Expr> actuals = (LinkedList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MethodCallExpr(ownerExpr, methodId, actuals); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= NEW INT L_ARRAY expr R_ARRAY 
            {
              Expr RESULT =null;
		int lengthExprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lengthExprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr lengthExpr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NewIntArrayExpr(lengthExpr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= NEW Identifier LPAREN RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new NewObjectExpr(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= arrAccessExpr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= arrLengthExpr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= THIS 
            {
              Expr RESULT =null;
		 RESULT = new ThisExpr(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= Identifier 
            {
              Expr RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IdentifierExpr(identifier); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // arrLengthExpr ::= expr DOT LENGTH 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new ArrayLengthExpr(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrLengthExpr",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // arrAccessExpr ::= expr L_ARRAY expr R_ARRAY 
            {
              Expr RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr arr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrayAccessExpr(arr,e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrAccessExpr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // methodCallList ::= LPAREN RPAREN 
            {
              LinkedList<Expr> RESULT =null;
		 RESULT = new LinkedList<Expr>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodCallList",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // methodCallList ::= LPAREN exprList RPAREN 
            {
              LinkedList<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expr> e = (LinkedList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodCallList",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // varDecl ::= type Identifier END_SENT 
            {
              VarDecl RESULT =null;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AstType varType = (AstType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VarDecl(varType,varName,10); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDecl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // varDeclsList ::= varDeclsList varDecl 
            {
              LinkedList<VarDecl> RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<VarDecl> vars = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int varDecl1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varDecl1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VarDecl varDecl1 = (VarDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 vars.add(varDecl1); RESULT = vars; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDeclsList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // varDeclsList ::= 
            {
              LinkedList<VarDecl> RESULT =null;
		 RESULT = new LinkedList<VarDecl>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDeclsList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exprList ::= expr 
            {
              LinkedList<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<Expr>(); RESULT.add(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprList",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exprList ::= expr COMMA exprList 
            {
              LinkedList<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Expr> el = (LinkedList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 el.addFirst(e); RESULT = el; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprList",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Identifier ::= IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = id; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Identifier",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
